;aproximacao do valor de pi utilizando a serie de Leibniz da aluna Rebeca Xavier.

;registradores utilizados:

;s0: guardar num de termos

;f0:numerador
;f1:numeros dois utilizado para a iteração
;f2:multiplicador q faz parte do calc da serie
;f3:denominador
;f5:acumulador
;f7:utilizado para operacao realizada durante o print
;f9:dez utilizado para conversao durante a opreracao de print

;t0:dois usado na parte de verificacao de soma ou subtracao
;t1:acumulador referente a quantidade termos q ja foram iterados
;t2:usado para decisao dos labels sub ou soma
;t5:numero de casas decimais impressas

;a1:usada pela syscall 5 para guardar o valor q sera impresso


;labels e respectivas funcoes:

;loop: controla e garante que seja realizado o adicao e subtracao correta utulizando o num de termos fornecidos, por meio de uma comparacao registrador acumulador temporario e o num de termos e chamada dos 
;lables q realizam as operacoes propriamente ditas de soma e subtracao. sendo somado caso o acumulador seja par e subtracao caso seja impar
;add e sub: operacoes necessarias para funcionamento da serie de Leibniz
;iter: label responsavel pelo aumento do denominador em dois e aumentos do acumulador que controla quntas vezes o loop ocorre

;print: realiza a impressao da parte inteira da aprox, transformando o valor guardado em f5 em int, mas antes guardadndo o valor double no reg f7 q sera usado na impressao da parte decimal
;print_decimal: por meio da multiplicacao por 10 da subtracao entre numero double e parte inteira eh possivel realizar o print correto sem perda de valores da parte decimal

;fim: finaliza programa
	
	
	
	.data
num_termos: .word32 100 ;mude esse valor para realizar mais ou menos iteracoes
parte_int: .asciiz  "\nAproximacao do valor de pi: %i."
parte_dec: .asciiz	"%i"
params_sys5: .space 8
param_num: .space 8
um:   .double 		1.0
dois: .double 		2.0
tres: .double 		3.0
quatro: .double 	4.0
zero: .double 		0.0
conversor: .double  10.0

	.code

lb $s0, num_termos($zero)
l.d f0, um($zero) 
l.d f1, dois($zero) 
l.d f2, quatro($zero) 
l.d f3, um($zero) 
l.d f5, zero($zero)	
l.d f9, conversor($zero)
addi $t0, $zero, 2
addi $t1, $zero, 0  	
addi $t5, $zero, 5

loop:
beq $s0, $t1, print
div.d f6,f0,f3
mul.d f6,f6,f2
div $t1, $t0
mfhi $t2
beqz $t2, add
bnez $t2, sub

add:
add.d f5,f5,f6
j iter

sub:
sub.d f5,f5,f6
j iter

iter:
add.d f3,f3,f1
addi $t1, $t1, 1
j loop

print:
daddi $a3,$zero,parte_int
sw $a3,params_sys5($zero)
daddi $t6,$zero,params_sys5

cvt.w.d f7,f5
mfc1 $a1,f7
sw $a1,param_num($zero)
syscall 5 

daddi $a1,$zero,parte_dec
sw $a1,params_sys5($zero)
daddi $t6,$zero,params_sys5
addi $t4, $zero, 1 
beq $s0, $t4, fim ;trata para caso em 1 o num de termo = 1
j print_decimal


print_decimal:
beqz $t5,fim
addi $t5, $t5,-1

cvt.d.w f7,f7 ;de inteiro p double
sub.d f5,f5,f7 ;subtracao para achar o proximo numero a ser impresso
mul.d f5,f5,f9 ;mult para numero impresso ficar antes da virgula
cvt.w.d f7, f5 ; transf em double p inteiro para poder realizar impressao
mfc1 $a1, f7
sw $a1,param_num($zero)
syscall 5
j print_decimal

fim:
syscall 0
